(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{275:function(e,v,l){"use strict";l.r(v);var t=l(28),_=Object(t.a)({},(function(){var e=this,v=e.$createElement,l=e._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"nodejs-learning"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-learning"}},[e._v("#")]),e._v(" NodeJS Learning")]),e._v(" "),l("h2",{attrs:{id:"知识体系"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#知识体系"}},[e._v("#")]),e._v(" 知识体系")]),e._v(" "),l("ul",[l("li",[e._v("简介：Node 为我们提供了一个无需依赖浏览器、能够直接与操作系统进行交互的 JavaScript 代码运行环境")]),e._v(" "),l("li",[e._v("安装及基本使用")]),e._v(" "),l("li",[e._v("异步编程\n"),l("ul",[l("li",[e._v("Callbacks")]),e._v(" "),l("li",[e._v("Promises")]),e._v(" "),l("li",[e._v("Generator")]),e._v(" "),l("li",[e._v("Async and Await")])])]),e._v(" "),l("li",[e._v("模块机制")]),e._v(" "),l("li",[e._v("npm 包管理")]),e._v(" "),l("li",[e._v("核心知识\n"),l("ul",[l("li",[l("RouterLink",{attrs:{to:"/NodeJS/Node Event Loop.html"}},[e._v("Node Event Loop")]),e._v(" "),l("ul",[l("li",[e._v("timers（setTimeout、setIntervel）")]),e._v(" "),l("li",[e._v("setImmediate")]),e._v(" "),l("li",[e._v("nextTick")])])],1)])]),e._v(" "),l("li",[e._v("Node 全局对象\n"),l("ul",[l("li",[e._v("process")]),e._v(" "),l("li",[e._v("readline")]),e._v(" "),l("li",[e._v("console")]),e._v(" "),l("li",[e._v("worker")]),e._v(" "),l("li",[e._v("events\n"),l("ul",[l("li",[e._v("NodeJS Event Emitter是NodeJS的核心API，它使您可以将侦听器功能附加到特定事件，一旦事件触发，该事件将被调用。此行为看起来像异步的，因为事件处理程序通常在其最初注册为事件处理程序的时间之后才调用。但是 Event Emitter 是 Node 观察者模式的内置实现，Node 不会在事件循环队列中安排任何事件，一旦事件触发，它将在调用栈上同步的执行监听器，观察者模式能够解耦代码，使代码可读性更强")])])])])]),e._v(" "),l("li",[e._v("其他知识点\n"),l("ul",[l("li",[e._v("中断机制")]),e._v(" "),l("li",[e._v("进程通信\n"),l("ul",[l("li",[e._v("信号")])])])])]),e._v(" "),l("li",[e._v("使用场景\n"),l("ul",[l("li",[e._v("Node CLI")])])])])])}),[],!1,null,null,null);v.default=_.exports}}]);