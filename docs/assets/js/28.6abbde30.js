(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{272:function(e,t,a){"use strict";a.r(t);var s=a(28),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"akryum-vue-component"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#akryum-vue-component"}},[e._v("#")]),e._v(" akryum:vue-component")]),e._v(" "),a("p",[e._v("使用 "),a("a",{attrs:{href:"https://github.com/meteor-vue/vue-meteor/tree/master/packages/vue-component",target:"_blank",rel:"noopener noreferrer"}},[e._v("akryum:vue-component"),a("OutboundLink")],1),e._v(" 包帮助 meteor 识别编译 vue 文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("meteor add akryum:vue-component\n")])])]),a("h2",{attrs:{id:"vue-meteor-tracker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-meteor-tracker"}},[e._v("#")]),e._v(" vue-meteor-tracker")]),e._v(" "),a("p",[e._v("使用 "),a("a",{attrs:{href:"https://github.com/meteor-vue/vue-meteor-tracker",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-meteor-tracker"),a("OutboundLink")],1),e._v(" 包，在 Vue 组件中集合 Meteor 响应数据。")]),e._v(" "),a("h3",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("meteor npm install --save vue-meteor-tracker\n")])])]),a("h3",{attrs:{id:"install-the-plugin-into-vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-the-plugin-into-vue"}},[e._v("#")]),e._v(" Install the plugin into Vue")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import VueMeteorTracker from 'vue-meteor-tracker';\nVue.use(VueMeteorTracker);\n")])])]),a("h3",{attrs:{id:"use"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use"}},[e._v("#")]),e._v(" Use")]),e._v(" "),a("p",[e._v("在你的 vue 组件中添加 meteor 对象属性 :")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Vue({\n  meteor: {\n    // Meteor specific options\n  }\n});\n")])])]),a("h3",{attrs:{id:"subscriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscriptions"}},[e._v("#")]),e._v(" Subscriptions")]),e._v(" "),a("p",[e._v("在 $subscribe object 定义订阅者，key 为发布者名称，value 为数组参数，在订阅的时候传递给发布者。")]),e._v(" "),a("blockquote",[a("p",[e._v("当组件销毁时订阅将停止")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("meteor: {\n  //在 $subscribe object 定义订阅者\n  $subscribe: {\n    // 不带参数订阅 'threads' 发布者 \n    'threads': [],\n    // 带参数订阅 'threads' 发布者 \n    'threads': ['new', 10], // The 10 newest threads\n    // 带动态参数订阅 'threads' 发布者 \n    // 当 vue 响应属性改变时，重新订阅\n    'posts': function() {\n      // Here you can use Vue reactive properties\n      return [this.selectedThreadId] // Subscription params\n    }\n  }\n}\n")])])]),a("p",[e._v("你能够 $subscribe(name, ...params) 方法在你的组件代码中:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ready () {\n  // Subscribes to the 'threads' publication with two parameters\n  this.$subscribe('thread', 'new', 10);\n}\n")])])]),a("p",[e._v("在你的组件中，$subReady 对象属性包含订阅者订阅状态 ，为了获知订阅者是否已订阅，你可以这样做：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(this.$subReady.thread);\n")])])]),a("p",[e._v("或者在你的模板中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div v-if="!$subReady.thread">Loading...</div>\n')])])]),a("h3",{attrs:{id:"reactive-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactive-data"}},[e._v("#")]),e._v(" Reactive data")]),e._v(" "),a("p",[e._v("在 meteor 对象里的属性（不在 "),a("em",[e._v("$subscribe")]),e._v(" 中）会被转化为 vue 的响应属性（附加到 vue 的 data 属性中） ，你可以在模板中像标准 vue data 属性一样使用，或者在计算属性中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\ndata() {\n      return {\n        // 初始化 todos 也不用\n        todos: [],\n        newTodo: ''\n      }\n  },\n  meteor: {\n    $subscribe: {\n      ['todos']: []\n    },\n    // todos 属性会响应更新 meteor 的响应数据源（就像 collections 或者 session ）\n    // 当 Todos 集合发生变化时，todos将发生改变\n    todos() {\n        return Todos.find({}, {sort: {date: -1}});\n    }\n  },\n...\n")])])]),a("p",[e._v("通过上面做法，仅仅让 vue data 响应更新于 meteor 响应数据源，当 Todos 发生改变，vue 的 todos 数据属性才能获取更新，如下图所示")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://api.laoergege.cn//images/ZgLGP1uR4fP4n3NP5SCJ6O0b.PNG",alt:"image.png"}})]),e._v(" "),a("p",[e._v("通过把 meteor 对象属性的值定义为一个对象，我们可以让vue data 不仅响应更新于 meteor 响应数据源，还依赖其他参数（该参数可以为 vue 的响应属性），该对象有以下来个参数：")]),e._v(" "),a("ul",[a("li",[e._v("params() (可选), 返回对象的函数, 该对象属性值可以为 vue data 的响应属性")]),e._v(" "),a("li",[e._v("update([params]), 但依赖参数发生改变回调的函数。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\nmeteor: {\n    // 无参订阅 todos \n    $subscribe: {\n      [\"todos\"]: []\n    },\n    todos: {\n      // 声明定义一个依赖 vue 响应属性的参数\n      params() {\n        // Here you can use Vue reactive properties\n        // Don't use Meteor reactive sources!\n        return {\n          type: this.type\n        };\n      },\n      // 可选项，深度观察嵌套对象属性值，\n      // 此处 type 为普通类型，故 false\n      deep: false,\n      //// Meteor Reactivity\n      // param 参数响应 vue 更新时，将刷新 todos 属性值\n      // Then it calls Tracker.autorun() to refresh the result\n      // each time a Meteor reactive source changes\n      update({ type }) {\n        //   Here you can use Meteor reactive sources\n        //  like cursors or reactive vars\n        //  Don't use Vue reactive properties!\n        if (type) {\n          return Todos.find({checked: true},{sort: {date: -1}});\n        } else {\n          return Todos.find({checked: false},{sort: {date: -1}});\n        }\n      }\n    }\n  },\n...\n")])])]),a("p",[a("img",{attrs:{src:"https://api.laoergege.cn//images/YuPCU1j9e8Up-UmjC-bT0map.PNG",alt:"image.png"}})]),e._v(" "),a("h3",{attrs:{id:"开启或禁用-meteor-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启或禁用-meteor-data"}},[e._v("#")]),e._v(" 开启或禁用 meteor data")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n  meteor: {\n    // ...\n  },\n\n  methods: {\n    activate () {\n      this.$startMeteor()\n    },\n\n    deactivate () {\n      this.$stopMeteor()\n    },\n  },\n}\n")])])]),a("h4",{attrs:{id:"你能够使用来防止-meteor-data-自启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你能够使用来防止-meteor-data-自启动"}},[e._v("#")]),e._v(" 你能够使用来防止 meteor data 自启动")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n  meteor: {\n    $lazy: true,\n    // ...\n  },\n}\n")])])]),a("h3",{attrs:{id:"freezing-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#freezing-data"}},[e._v("#")]),e._v(" Freezing data")]),e._v(" "),a("p",[e._v("此选项将对 Meteor 数据使用 Object.freeze，以防止 Vue 响应。 这样可以在渲染大型集合列表时提高 Vue 的性能。 默认情况下，此选项已关闭。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Disable Vue reactivity on Meteor data\nVue.config.meteor.freeze = true;\n")])])]),a("h2",{attrs:{id:"vue-supply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-supply"}},[e._v("#")]),e._v(" vue-supply")]),e._v(" "),a("h3",{attrs:{id:"installation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation-2"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save vue-supply\n")])])]),a("h3",{attrs:{id:"use-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-2"}},[e._v("#")]),e._v(" Use")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import Vue from 'vue'\nimport VueSupply from 'vue-supply'\n\nVue.use(VueSupply)\n")])])]),a("p",[e._v("当应用变得越来越庞大时，我们需要在每个组件重复定义 meteor 属性，并且我们可能定义同样的值，管理这些响应性数据源就会变得越来越困难。\n使用 "),a("a",{attrs:{href:"https://github.com/Akryum/vue-supply",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-supply"),a("OutboundLink")],1),e._v("，您可以轻松地使用数据并自动激活或停用订阅。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://api.laoergege.cn//images/OZI3m0wNELitR70-1cTCKj85.PNG",alt:"image.png"}})]),e._v(" "),a("p",[e._v("vue-supply 为我们的应用添加了一层 supply，帮助我们管理订阅 meteor 数据，避免在组件重复订阅 meteor 数据。\n使用 vue-supply，您可以创建扩展Supply定义的 Vue 实例。定义两个方法: activate 和 deactivate。当在组件或 Vue store 首次消费该 "),a("strong",[e._v("supply")]),e._v(" 时，它会自动激活（使用 "),a("em",[e._v("grasp")]),e._v(" 方法）；当没有组件使用它时，它会自动关闭（使用 "),a("em",[e._v("release")]),e._v(" 方法）。当激活或关闭时，"),a("strong",[e._v("supply")]),e._v(" 会回调 activate 和 deactivate 方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// base.js\nexport default {\n  extends: Supply,\n\n  methods: {\n    activate () {\n      // 当激活时，开启 meteor ，订阅发布者\n      this.$startMeteor()\n    },\n\n    deactivate () {\n      // 关闭 meteor ，取消订阅\n      this.$stopMeteor();\n    },\n  },\n\n  meteor: {\n     // 关闭 vue-meteor-tracker自启动订阅 meteor data\n     // 让 supply 监听组件，管理订阅\n    $lazy: true,\n  },\n}\n")])])]),a("p",[e._v("当激活或关闭时，"),a("strong",[e._v("supply")]),e._v(" 会发射 consumers 和 active 事件，你可以使用 watch 其属性和 $on 监听其 'is-active' 和 'is-not-active' 事件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// xxx.supply.js\nimport base from "./base";\n\nexport default {\n    extends: base,\n\n    data() {\n        return {\n           ...\n        }\n    },\n\n    meteor: {\n        ...\n    },\n\n    watch: {\n        // 监听 supply 是否激活\n        active(val){\n            console.log(val);\n        },\n\n        // 监听 组件消费者个数\n        consumers(val){\n            console.log(val);\n        }\n    }\n}\n')])])]),a("p",[e._v("你也可以使用 "),a("em",[e._v("supply.ensureActive()")]),e._v("，返回一个 Promise（that resolves as soon as the supply is activated ）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TestResource.ensureActive().then(() => {\n  // The supply is active\n})\n")])])]),a("h3",{attrs:{id:"registration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registration"}},[e._v("#")]),e._v(" Registration")]),e._v(" "),a("p",[e._v("建议注册 "),a("strong",[e._v("supply 定义")]),e._v("，以便注入到组件和 vuex stroe 中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { register } from 'vue-supply'\nimport TestResourceDef from 'supply/test-resource'\nregister('TestResource', TestResourceDef)\n")])])]),a("h3",{attrs:{id:"usage-in-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-in-components"}},[e._v("#")]),e._v(" Usage in components")]),e._v(" "),a("p",[e._v("在组件内部，use（name，manageKeepAlive = true）添加一个mixin，使用注册中使用的名称（如上所述），创建和销毁组件时自动消费或释放 supply：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// todo-list.component.js\nimport { use } from "vue-supply";\n\nexport default {\n  name: "app",\n  components: {\n    "todo-list": TodoList\n  },\n  mixins: [use("TodoSupply")],\n  data() {\n    return {\n      newTodo: ""\n    };\n  },\n  computed: {\n    todos() {\n      return this.$supply.TodoSupply.todos;\n    },\n    ready() {\n      return this.$supply.TodoSupply.active;\n    },\n    type() {\n      return this.$supply.TodoSupply.type;\n    }\n  },\n....\n')])])]),a("p",[e._v("通过计算 "),a("code",[e._v("this.$supply.TestResource.[someData]")]),e._v(" 该响应属性获取数据。")]),e._v(" "),a("h3",{attrs:{id:"usage-in-vuex-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage-in-vuex-store"}},[e._v("#")]),e._v(" Usage in Vuex store")]),e._v(" "),a("p",[e._v("see "),a("a",{attrs:{href:"https://github.com/Akryum/vue-supply#usage-in-vuex-store",target:"_blank",rel:"noopener noreferrer"}},[e._v("Usage in Vuex store"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"加载系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载系统"}},[e._v("#")]),e._v(" 加载系统")]),e._v(" "),a("p",[e._v("每个 "),a("strong",[e._v("supply")]),e._v(" 都有一个 loading 状态，它有两个值状态：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("0")]),e._v(" 意味着该 "),a("strong",[e._v("supply")]),e._v(" 已经 ready，可以消费了。该值为默认值。")]),e._v(" "),a("li",[a("code",[e._v("1 以上")]),e._v(" 意味着加载状态。")])]),e._v(" "),a("p",[e._v("你应该改变 loading 属性值在 activate and deactive 方法内，因为一般我们在该方法中发起订阅或取消订阅:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { Supply } from 'vue-supply'\n\nexport default new Vue({\n  extends: Supply,\n  methods: {\n    activate () {\n      console.log('subscribing...')\n      // Use the integer `loading` property\n      // 0 mean ready\n      this.loading ++\n      // Faking a server request here :p\n      setTimeout(() => {\n        console.log('data is loaded')\n        this.loading --\n      }, 1000)\n    },\n  },\n})\n")])])]),a("p",[a("strong",[e._v("supply")]),e._v("有 ready 属性(with a boolean argument), 和 is-ready 、is-not-ready 事件.，你可以去计算 ready 属性或监听事件 。")]),e._v(" "),a("p",[e._v("更多详情参考官方 "),a("a",{attrs:{href:"https://github.com/Akryum/vue-supply#usage-in-vuex-store",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue-supply"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("h2",{attrs:{id:"collections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[e._v("#")]),e._v(" Collections")]),e._v(" "),a("h3",{attrs:{id:"aldeed-simple-schema-（设计数据模式）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aldeed-simple-schema-（设计数据模式）"}},[e._v("#")]),e._v(" aldeed:simple-schema （设计数据模式）")]),e._v(" "),a("p",[e._v("Mongo 数据虽然是无模式，但这不意味着我们就不可以用模式去设计规范验证我们的数据。使用 "),a("a",{attrs:{href:"https://atmospherejs.com/aldeed/simple-schema",target:"_blank",rel:"noopener noreferrer"}},[e._v("aldeed:simple-schema"),a("OutboundLink")],1),e._v(" ，设计验证我们数据。")]),e._v(" "),a("h4",{attrs:{id:"installation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation-3"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ meteor add aldeed:simple-schema\n")])])]),a("h3",{attrs:{id:"use-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-3"}},[e._v("#")]),e._v(" Use")]),e._v(" "),a("h4",{attrs:{id:"定义-schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义-schema"}},[e._v("#")]),e._v(" 定义 Schema")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// todos.collection.js\nexport const TodoSchema = new SimpleSchema({\n    title: {\n        type: String,   \n        max: 200,\n        min: 1,\n        // 自定验证器\n        custom: function () {\n            if(this.value.trim().length == 0){\n                return '不能为空'\n            }\n        }\n    },\n\n    checked: {\n        type: Boolean\n    },\n\n    date: {\n        type: Date\n    }\n})\n\ntodos.schmea = TodoSchema;\n")])])]),a("h4",{attrs:{id:"验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证"}},[e._v("#")]),e._v(" 验证")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// App.vue\ndata() {\n    return {\n      newTodo: "",\n      // 定义验证空间，针对不同区域验证\n      context: Todos.schmea.namedContext("myContext") \n    };\n  },\n  computed: {\n    todos() {\n      return this.$supply.TodoSupply.todos;\n    },\n    ready() {\n      return this.$supply.TodoSupply.ready;\n    },\n    type() {\n      return this.$supply.TodoSupply.type;\n    }\n  },\n  methods: {\n    submit() {\n      let newtodo = {\n        title: this.newTodo,\n        date: new Date(),\n        checked: false\n      };\n      // 验证\n      if (this.context.validate(newtodo)) {\n        Todos.insert(newtodo);\n      }\n\n       this.newTodo = "";\n    },\n')])])]),a("h4",{attrs:{id:"错误信息提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误信息提示"}},[e._v("#")]),e._v(" 错误信息提示")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<span v-show="context.keyIsInvalid(\'title\')" class="has-text-danger">不能为空</span>\n      <div class="control has-icons-left has-icons-right">\n        <input class="input is-medium" :class="{\'is-danger\': context.keyIsInvalid(\'title\')}" type="text" placeholder="write it..." v-model="newTodo" @keyup.enter="submit">\n        <span class="icon is-small is-left">\n          <i class="fa fa-file-o"></i>\n        </span>\n      </div>\n')])])]),a("p",[e._v("这里不多述 "),a("strong",[e._v("SimpleSchema")]),e._v(" 的用法，请自行查看 "),a("a",{attrs:{href:"https://atmospherejs.com/aldeed/simple-schema",target:"_blank",rel:"noopener noreferrer"}},[e._v("api"),a("OutboundLink")],1),e._v(" 。")]),e._v(" "),a("h3",{attrs:{id:"publications-and-data-loading（发布订阅）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#publications-and-data-loading（发布订阅）"}},[e._v("#")]),e._v(" Publications and Data Loading（发布订阅）")]),e._v(" "),a("p",[e._v("为了提高数据安全性，我们不应该直接在客户端使用 Collections ，不应该直接调用 collection.insert() 等方法对数据库进行写入。我们应该服务端发布可访问的共有数据，定义数据写入接口：")]),e._v(" "),a("ul",[a("li",[e._v("Meteor.pulish() 定义数据发布接口")]),e._v(" "),a("li",[e._v("Meteor.methods() 定义数据操作接口")])]),e._v(" "),a("blockquote",[a("p",[e._v("publisher 在没有想要返回数据情况下要返回this.ready()")])]),e._v(" "),a("p",[a("strong",[e._v("服务端发布")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// todos.collection.js\nif (Meteor.isServer) {\n    // 定义数据发布接口\n    Meteor.publish('todos', function tasksPublication() {\n        return todos.find({});\n    });\n    // 定义数据操作接口\n    Meteor.methods({\n        ['todos.insert'](val) {\n            todos.insert(val);\n        },\n\n        ['todo.update.checked']({_id: _id, checked: _checked}) {\n            Todos.update(\n                { _id: _id },\n                { $set: { checked: _checked } },\n                { multi: true }\n            );\n        }\n    })\n}\n")])])]),a("p",[a("strong",[e._v("客户端订阅")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const handle = Meteor.subscribe（'lists.public'）;\n/**\nhandle：\n{\n.ready()：boolean（true：当this.ready()明确调用，或者返回的游标的初始内容将被发送）\n.stop()：停止订阅，清除缓存\n}\n*/\n")])])]),a("p",[e._v("你能够自定义错误信息发送到客户端：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// on the server, pick a code unique to this error\n// the reason field should be a useful debug message\nthrow new Meteor.Error("logged-out",\n  "The user must be logged in to post a comment.");\n\n// on the client\nMeteor.call("methodName", function (error) {\n  // identify the error\n  if (error && error.error === "logged-out") {\n    // show a nice error message\n    Session.set("errorMessage", "Please log in to post a comment.");\n  }\n});\n')])])]),a("h3",{attrs:{id:"aldeed-collection2（自动验证数据）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aldeed-collection2（自动验证数据）"}},[e._v("#")]),e._v(" aldeed:collection2（自动验证数据）")]),e._v(" "),a("p",[e._v("扩展 Mongo.Collection，提供对 Collection 指定 Schmea，在进行插入和更新数据时自动验证数据模式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// todos.collection.js\nif (Meteor.isServer) {\n    // 定义数据发布接口\n    Meteor.publish('todos', function tasksPublication() {\n        return todos.find({});\n    });\n    // 定义数据操作接口\n    Meteor.methods({\n        ['todos.insert'](val) {\n            try {\n                todos.insert(val);\n            } catch (error) {\n\n                if (error.sanitizedError.error == 400) {\n                     // 由于验证只在服务端，所以必须把验证错误信息反馈给前台  \n                    // 发送 验证错误消息\n                    error.sanitizedError.error = 'ValidationErrors';\n                    throw error.sanitizedError;\n                }\n            }\n        },\n\n        ...\n    })\n}\n...\n\ntodos.schema = TodoSchema;\n\n// 指定附加 Schema\ntodos.attachSchema(TodoSchema);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// app.vue\nsubmit() {\n      let newtodo = {\n        title: this.newTodo,\n        date: new Date(),\n        checked: false\n      };\n      // 重置验证器\n      this.context.resetValidation() \n\n      // 调用远程服务\n      Meteor.call("todos.insert", newtodo,  (error) => {\n        // 动态添加错误验证消息\n        if(error && error.error == \'ValidationErrors\')\n          this.context.addInvalidKeys(JSON.parse(error.details))\n      });\n\n      this.newTodo = "";\n    },\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 响应反馈错误消息\n <span v-show=\"context.keyIsInvalid('title')\" class=\"has-text-danger\">{{context.keyErrorMessage('title')}}</span>\n")])])]),a("h3",{attrs:{id:"分页"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分页"}},[e._v("#")]),e._v(" 分页")]),e._v(" "),a("p",[e._v("分页是一种非常常见的数据访问模式。通常有两种分页样式，即“逐页”样式，您只能在一段时间只显示一页结果，从某些偏移开始（用户可以控制），以及“无限滚动“样式。\n在逐页技术中，如果我们要达到以下效果：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://api.laoergege.cn//images/dJEIssZEspCZRa8IB4dveJn1.PNG",alt:"image.png"}})]),e._v(" "),a("p",[e._v("我至少要关注三个参数：")]),e._v(" "),a("ul",[a("li",[e._v("skip，跳过第几页")]),e._v(" "),a("li",[e._v("limit，每页显示数据数量")]),e._v(" "),a("li",[e._v("pages，总页数")])]),e._v(" "),a("p",[e._v("通过在 $subscribe 子属性值中返回 vue响应属性数组（订阅参数），我们可以响应式向服务端发布者获取不同页码数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//todos.supply.js\n...\ndata() {\n        return {\n            // 初始化属性值\n            todos: [],\n            type: false, // type 用来标志 todos 列表显示完成或未完成\n            skip: 0,    // 跳过页数\n            limit: 5,   // 显示数据数量\n            pages: 0 // 页数\n        }\n    },\n\n    meteor: {\n        // 无参订阅 todos \n        $subscribe: {\n            [\"todos\"]: function () {\n                // 响应式订阅\n                return [this.type, this.limit, this.skip] //查询 是否已标记， 数据量， 跳跃点\n            }\n        },\n        todos() {\n            this.pages = Math.ceil(Counts.get('todosCounts')/this.limit) || 1; // 计算页数\n            return Todos.find({}, {sort: { date: -1 }});\n        }\n    },\n...\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// todos.collection.js\n Meteor.publish('todos', function tasksPublication(checked, limit, skip) {\n        // 实时订阅 todos 总数\n        Counts.publish(this, 'todosCounts', todos.find({ checked: checked }));\n        return todos.find({ checked: checked }, { limit: limit, skip: skip * limit, sort: { date: -1 } });\n    });\n")])])]),a("h4",{attrs:{id:"tmeasday-publish-counts（实时获取-collection-count）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tmeasday-publish-counts（实时获取-collection-count）"}},[e._v("#")]),e._v(" tmeasday:publish-counts（实时获取 Collection Count）")]),e._v(" "),a("p",[e._v("在上面代码中，使用 "),a("a",{attrs:{href:"https://atmospherejs.com/tmeasday/publish-counts",target:"_blank",rel:"noopener noreferrer"}},[e._v("tmeasday:publish-counts"),a("OutboundLink")],1),e._v(" 包，来实时获取 todos 总数量，再计算出总页数。publish-counts 有以下主要方法：")]),e._v(" "),a("ul",[a("li",[e._v("Counts.publish [server] ，服务端代码中订阅集合")]),e._v(" "),a("li",[e._v("Counts.get [client]"),a("br"),e._v("\n一旦你在服务端调用 Counts.publish , 你就可以在客户端调用 Counts.get('name-of-counter') 去响应获取计数器.\n该方法会返回一个整数, 返回 0 意味着你还没发布或订阅不成功。")]),e._v(" "),a("li",[e._v("Counts.has [client]，判断是否有指定计数器。")])]),e._v(" "),a("h3",{attrs:{id:"集合关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合关联"}},[e._v("#")]),e._v(" 集合关联")]),e._v(" "),a("p",[e._v("非关系型数据库 MongoDB 推荐我们更多的是文档嵌套，把多个文档嵌套成一个文档。但有时在文档的设计规范上，我们需要将数据分成两个或以上的集合储存。")]),e._v(" "),a("h3",{attrs:{id:"用户系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户系统"}},[e._v("#")]),e._v(" 用户系统")]),e._v(" "),a("p",[e._v("meteor 基于 accounts-base 内置有一套用户系统，该用户集合基于标准的模式，大概字段如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  _id: 'QwkSmTCZiw5KDx3L6',  // Meteor.userId()\n  username: 'cool_kid_13', // Unique name\n  emails: [\n    // Each email address can only belong to one user.\n    { address: 'cool@example.com', verified: true },\n    { address: 'another@different.com', verified: false }\n  ],\n  createdAt: new Date('Wed Aug 21 2013 15:16:52 GMT-0700 (PDT)'),\n  profile: {\n    // The profile is writable by the user by default.\n    name: 'Joe Schmoe'\n  },\n  //请注意，当用户注册不同的登录服务时，services 模式是不同的。\n  services: {\n    facebook: {\n      id: '709050', // Facebook ID\n      accessToken: 'AAACCgdX7G2...AbV9AZDZD'\n    },\n    resume: {\n      loginTokens: [\n        { token: '97e8c205-c7e4-47c9-9bea-8e2ccc0694cd',\n          when: 1349761684048 }\n      ]\n    }\n  }\n}\n")])])]),a("ul",[a("li",[e._v("通过 "),a("code",[e._v("Meteor.users")]),e._v(" 访问用户集合")]),e._v(" "),a("li",[e._v("客户端访问 "),a("code",[e._v("Meteor.userId()")]),e._v(" 并且 "),a("code",[e._v("Meteor.user()")]),e._v("，其获取用户登录状态及信息。")]),e._v(" "),a("li",[e._v("服务端在 publish 和 method 方法里，通过 "),a("code",[e._v("this.userId()")]),e._v(" 和 "),a("code",[e._v("this.user()")]),e._v(" 访问当前用户。")])]),e._v(" "),a("p",[e._v("meteor 支持多种第三方登录验证：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# pick one or more of the below\nmeteor add accounts-facebook\nmeteor add accounts-google\nmeteor add accounts-github\nmeteor add accounts-twitter\nmeteor add accounts-meetup\nmeteor add accounts-meteor-developer\n")])])]),a("p",[e._v("你可以到 "),a("a",{attrs:{href:"https://atmospherejs.com/useraccounts/core?q=",target:"_blank",rel:"noopener noreferrer"}},[e._v("atmospherejs"),a("OutboundLink")],1),e._v("，搜索你想要的包及用法，目前很多第三方都支持 OAth，如果上述提供的第三方不满足，你可查看 "),a("a",{attrs:{href:"https://guide.meteor.com/accounts.html#oauth",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方 OAuth 指南"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"accounts-password"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accounts-password"}},[e._v("#")]),e._v(" accounts-password")]),e._v(" "),a("p",[e._v("对于大多数，我们还是以密码登录自己服务器验证方式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("meteor add accounts-password\n")])])]),a("ul",[a("li",[a("code",[e._v("Accounts.createUser")]),e._v(" 创建用户")]),e._v(" "),a("li",[a("code",[e._v("Meteor.logout([callback])")]),e._v(" 注销")]),e._v(" "),a("li",[a("code",[e._v("Meteor.loginWithPassword(user, password, [callback])")]),e._v(" 密码登录")]),e._v(" "),a("li",[a("code",[e._v("Accounts.findUserByUsername")]),e._v(" 和 "),a("code",[e._v("Accounts.findUserByEmail")]),e._v(" 方法查找用户")])]),e._v(" "),a("p",[e._v("更多 api "),a("a",{attrs:{href:"http://docs.meteor.com/api/passwords.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("accounts-password 还提供一个有趣的 "),a("a",{attrs:{href:"https://guide.meteor.com/accounts.html#email-flows",target:"_blank",rel:"noopener noreferrer"}},[e._v("电子邮箱工作流"),a("OutboundLink")],1),e._v("：")]),e._v(" "),a("ol",[a("li",[e._v("重设密码。当用户点击他们的电子邮件中的链接时，他们被带到一个他们可以为他们的帐户输入新密码的页面。")]),e._v(" "),a("li",[e._v("用户注册。新用户由管理员创建，但没有设置密码。当用户点击他们的电子邮件中的链接时，他们将被转到一个页面，他们可以为他们的帐户设置一个新的密码。非常类似于密码重置。")]),e._v(" "),a("li",[e._v("电子邮件验证。当用户单击其电子邮件中的链接时，应用程序会记录此电子邮件确实属于正确的用户。")])]),e._v(" "),a("h4",{attrs:{id:"meteor-user-集合自定义数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#meteor-user-集合自定义数据"}},[e._v("#")]),e._v(" Meteor user 集合自定义数据")]),e._v(" "),a("p",[e._v("随着您的应用程序变得更加复杂，您将始终需要存储有关个人用户的一些数据，而将这些数据放置在上述 Meteor.users 其他字段中。在更规范情况下，将 Meteor 的用户数据和您的数据保存在两个独立的表中是一个好主意，但由于MongoDB不能很好地处理数据关联，所以只需使用一个集合即可。")]),e._v(" "),a("h5",{attrs:{id:"将顶级字段添加到用户文档中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将顶级字段添加到用户文档中"}},[e._v("#")]),e._v(" 将顶级字段添加到用户文档中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Using address schema from schema.org\n// https://schema.org/PostalAddress\nconst newMailingAddress = {\n  addressCountry: 'US',\n  addressLocality: 'Seattle',\n  addressRegion: 'WA',\n  postalCode: '98052',\n  streetAddress: \"20341 Whitworth Institute 405 N. Whitworth\"\n};\nMeteor.users.update(userId, {\n  $set: {\n    mailingAddress: newMailingAddress\n  }\n")])])]),a("h4",{attrs:{id:"用户权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户权限"}},[e._v("#")]),e._v(" 用户权限")]),e._v(" "),a("p",[e._v("官方文档 "),a("a",{attrs:{href:"https://guide.meteor.com/accounts.html#roles-and-permissions",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);