(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{439:function(t,s,a){t.exports=a.p+"assets/img/matchAll.686cf94e.png"},440:function(t,s,a){t.exports=a.p+"assets/img/greedy1.c81caeab.png"},441:function(t,s,a){t.exports=a.p+"assets/img/greedy2.5724755a.png"},442:function(t,s,a){t.exports=a.p+"assets/img/lazy-back-tracking.785d6125.png"},557:function(t,s,a){"use strict";a.r(s);var e=a(47),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript-正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-正则表达式"}},[t._v("#")]),t._v(" JavaScript 正则表达式")]),t._v(" "),e("h2",{attrs:{id:"目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#javascript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("JavaScript 正则表达式")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E7%9B%AE%E5%BD%95"}},[t._v("目录")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%AD%A3%E5%88%99%E6%98%AF%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F%E8%A6%81%E4%B9%88%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E8%A6%81%E4%B9%88%E5%8C%B9%E9%85%8D%E4%BD%8D%E7%BD%AE"}},[t._v("正则是匹配模式，要么匹配字符，要么匹配位置")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E7%B1%BB"}},[t._v("字符类")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%BF%AE%E9%A5%B0%E7%AC%A6-s-%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%B1%BB"}},[t._v("修饰符 s 与字符类")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#unicode%E4%BF%AE%E9%A5%B0%E7%AC%A6-u-%E5%92%8C-class-p"}},[t._v("Unicode：修饰符 “u” 和 class \\p{...}")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%9B%86%E5%90%88%E5%92%8C%E8%8C%83%E5%9B%B4-"}},[t._v("集合和范围 [...]")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%87%8F%E8%AF%8D"}},[t._v("量词")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E8%B4%AA%E5%A9%AA%E5%8C%B9%E9%85%8D%E5%92%8C%E6%83%B0%E6%80%A7%E5%8C%B9%E9%85%8D"}},[t._v("贪婪匹配和惰性匹配")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%80%89%E6%8B%A9%E7%AC%A6"}},[t._v("选择符（|）")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%94%9A%E7%AC%A6-"}},[t._v("锚符 ^、$")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%A4%9A%E8%A1%8C%E6%A8%A1%E5%BC%8F-m-%E4%B8%8E-"}},[t._v("多行模式 m 与 ^、$")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E9%94%9A%E7%AC%A6--%E5%AF%B9%E6%AF%94-n"}},[t._v("锚符 ^$ 对比 \\n")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8D%95%E8%AF%8D%E8%BE%B9%E7%95%8C-b-%E5%92%8C-b"}},[t._v("单词边界 \\b 和 \\B")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%89%8D%E7%9E%BB%E6%96%AD%E8%A8%80%E5%92%8C%E5%90%8E%E7%9E%BB%E6%96%AD%E8%A8%80"}},[t._v("前瞻断言和后瞻断言")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%86%E7%BB%84"}},[t._v("分组")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%88%86%E7%BB%84%E5%8C%B9%E9%85%8D"}},[t._v("分组匹配")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B5%8C%E5%A5%97%E5%88%86%E7%BB%84%E5%8C%B9%E9%85%8D"}},[t._v("嵌套分组匹配")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%88%86%E7%BB%84%E5%91%BD%E5%90%8D%E5%8F%8A%E5%BC%95%E7%94%A8"}},[t._v("分组命名及引用")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%8E%92%E9%99%A4%E6%8D%95%E8%8E%B7%E5%88%86%E7%BB%84"}},[t._v("排除捕获分组")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9E%E6%BA%AF%E6%B3%95%E5%8E%9F%E7%90%86"}},[t._v("正则表达式回溯法原理")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E7%BB%83%E4%B9%A0%E9%A2%98"}},[t._v("练习题")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%A6%96%E5%AD%97%E6%AF%8D%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%A4%A7%E5%86%99"}},[t._v("将每个单词的首字母转换为大写")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%AD%97%E7%AC%A6%E4%B8%B2-trim-%E6%96%B9%E6%B3%95%E6%A8%A1%E6%8B%9F"}},[t._v("字符串 trim 方法模拟")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8C%B9%E9%85%8D%E6%88%90%E5%AF%B9%E6%A0%87%E7%AD%BE"}},[t._v("匹配成对标签")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96-url-pathname"}},[t._v("获取 URL pathname")])])])])])])]),t._v(" "),e("p",[t._v("参考阅读")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/qdlaoyao/js-regex-mini-book",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 正则表达式迷你书"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zh.javascript.info/regular-expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("正则表达式是搜索和替换字符串的一种强大方式。")]),t._v(" "),e("p",[t._v("正则表达式（可叫作“regexp”或者“reg”）包含"),e("strong",[t._v("模式")]),t._v("和可选的"),e("strong",[t._v("修饰符")]),t._v("。")]),t._v(" "),e("p",[t._v("创建 JavaScript 正则表达式的方式有：")]),t._v(" "),e("ul",[e("li",[t._v("RegExp 实例 "),e("code",[t._v('regexp = new RegExp("pattern", "flags");')])]),t._v(" "),e("li",[t._v("字面量 "),e("code",[t._v("regexp = /pattern/flag;")])])]),t._v(" "),e("blockquote",[e("p",[t._v("相比正则字面量的方式 "),e("code",[t._v("new RegExp")]),t._v(" 允许从字符串中"),e("strong",[t._v("动态地构造模式")])])]),t._v(" "),e("p",[t._v("修饰符有")]),t._v(" "),e("ul",[e("li",[t._v("i 不区分大小写")]),t._v(" "),e("li",[t._v("g 全局搜索所有匹配项")]),t._v(" "),e("li",[t._v("m 多行模式")]),t._v(" "),e("li",[t._v("u 开启完整的 unicode 支持")]),t._v(" "),e("li",[t._v("s . 符号表示任意字符")]),t._v(" "),e("li",[t._v("y 粘滞模式")])]),t._v(" "),e("h2",{attrs:{id:"正则是匹配模式-要么匹配字符-要么匹配位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则是匹配模式-要么匹配字符-要么匹配位置"}},[t._v("#")]),t._v(" 正则是匹配模式，要么匹配字符，要么匹配位置")]),t._v(" "),e("p",[t._v("匹配字符的模式有")]),t._v(" "),e("ul",[e("li",[t._v("普通字符")]),t._v(" "),e("li",[t._v("字符类")]),t._v(" "),e("li",[t._v("集合和范围")])]),t._v(" "),e("p",[t._v("无论是字符类还是集合、范围的模式都只能表示一个字符，"),e("strong",[t._v("量词")]),t._v("用来形容我们所需要的数量")]),t._v(" "),e("p",[t._v("集合和范围模式赋予匹配单个字符能够有多种模式选择，但如果想匹配多个字符多种模式，可用选择符OR(|)")]),t._v(" "),e("p",[t._v("匹配位置的模式有锚符：")]),t._v(" "),e("ul",[e("li",[t._v("^、$")]),t._v(" "),e("li",[t._v("\\b、\\B")]),t._v(" "),e("li",[t._v("x(?=y)、x(?!y)、(?<=y)x、(?<!y)x")])]),t._v(" "),e("h3",{attrs:{id:"字符类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符类"}},[t._v("#")]),t._v(" 字符类")]),t._v(" "),e("ul",[e("li",[t._v("\\d 数字0到9")]),t._v(" "),e("li",[t._v("\\D 非 \\d")]),t._v(" "),e("li",[t._v("\\s 空格、水平制表符\\t、垂直制表符\\v、换行符\\n、换页页符\\f、回车符\\r")]),t._v(" "),e("li",[t._v("\\S 非 \\s")]),t._v(" "),e("li",[t._v("\\w 拉丁字母、数字、下划线")]),t._v(" "),e("li",[t._v("\\W 非 \\w")]),t._v(" "),e("li",[t._v(".  任意字符，除 \\n")]),t._v(" "),e("li",[t._v("\\p{...} 配合修饰符u，表示 unicode 字符")])]),t._v(" "),e("h4",{attrs:{id:"修饰符-s-与字符类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修饰符-s-与字符类"}},[t._v("#")]),t._v(" 修饰符 s 与字符类")]),t._v(" "),e("p",[t._v("默认情况下字符类 "),e("code",[t._v(".")]),t._v(" 不匹配换行符"),e("code",[t._v("\\n")]),t._v("，但修饰符 "),e("strong",[t._v("s")]),t._v(" 下的模式的字符类 "),e("code",[t._v(".")]),t._v(" 能够匹配换行符"),e("code",[t._v("\\n")]),t._v("，但是修饰符 s 在兼容性不是特别高，详见 "),e("a",{attrs:{href:"https://caniuse.com/#search=dotall",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://caniuse.com/#search=dotall"),e("OutboundLink")],1),t._v("，我们可以通过 "),e("code",[t._v("[\\s\\S]")]),t._v(" 模式表示任意字符，"),e("code",[t._v("\\s")]),t._v(" 和 "),e("code",[t._v("\\S")]),t._v(" 相冲，两者用集合的方式结合起来，就表示全部，类似的还有 "),e("code",[t._v("[\\d\\D]")]),t._v("、"),e("code",[t._v("[^]")]),t._v(" 等")]),t._v(" "),e("h4",{attrs:{id:"unicode-修饰符-u-和-class-p"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unicode-修饰符-u-和-class-p"}},[t._v("#")]),t._v(" Unicode：修饰符 “u” 和 class \\p{...}")]),t._v(" "),e("p",[t._v("TODO 未完成，先占个坑位")]),t._v(" "),e("h3",{attrs:{id:"集合和范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合和范围"}},[t._v("#")]),t._v(" 集合和范围 [...]")]),t._v(" "),e("ul",[e("li",[t._v("集合，如 [eao] 意味着查找在 3 个字符 'a'、'e' 或者 `‘o’ 中的任意一个")]),t._v(" "),e("li",[t._v("范围，如 [0-5] 表示从 0 到 5 的数字，[\\d] 表示 0 到 9 数字")]),t._v(" "),e("li",[t._v("排除范围 [^…]，如 [^]")]),t._v(" "),e("li",[t._v("[...] 除了在方括号中有特殊含义的字符外，其它所有特殊字符都是都不需要添加反斜杠的，如 [-().^+] 会查找 -().^+ 的其中任意一个字符")])]),t._v(" "),e("h3",{attrs:{id:"量词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),e("ul",[e("li",[t._v("+ 至少1次")]),t._v(" "),e("li",[t._v("* 至少0次")]),t._v(" "),e("li",[t._v("? 一个或零个")]),t._v(" "),e("li",[t._v("{n,m} 如 {5} 5次 {3,5} 3到5次 {3,} 大于等于3次")])]),t._v(" "),e("h4",{attrs:{id:"贪婪匹配和惰性匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪婪匹配和惰性匹配"}},[t._v("#")]),t._v(" 贪婪匹配和惰性匹配")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'a "witch" and her "broom" is one\'')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('".+"')]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "witch" and her "broom"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'a "witch" and her "broom" is one\'')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('".+?"')]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "witch"、"broom"')]),t._v("\n")])])]),e("p",[t._v("量词有两种工作模式")]),t._v(" "),e("p",[e("strong",[t._v("在贪婪模式下（默认情况下），量词都会尽可能地重复多次")]),t._v("。")]),t._v(" "),e("p",[t._v("惰性模式(量词之后添加一个问号 '?')只有在模式的剩余部分无法在给定位置匹配时，正则表达式引擎才会增加重复次数。")]),t._v(" "),e("blockquote",[e("p",[t._v("参考 "),e("a",{attrs:{href:"https://zh.javascript.info/regexp-greedy-and-lazy",target:"_blank",rel:"noopener noreferrer"}},[t._v("贪婪量词和惰性量词"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"选择符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择符"}},[t._v("#")]),t._v(" 选择符（|）")]),t._v(" "),e("p",[t._v("选择符号"),e("code",[t._v("(|)")]),t._v("作用并非在字符级别生效，而是在"),e("strong",[t._v("表达式级别")]),t._v("。")]),t._v(" "),e("ul",[e("li",[t._v("A|B|C 意思是命中 A、B 或 C 其一均可")]),t._v(" "),e("li",[t._v("gra|ey 匹配 “gra” or “ey”")]),t._v(" "),e("li",[t._v("gr(a|e)y 严格等同 gr[ae]y")])]),t._v(" "),e("h3",{attrs:{id:"锚符-、"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锚符-、"}},[t._v("#")]),t._v(" 锚符 ^、$")]),t._v(" "),e("p",[t._v("符号 "),e("code",[t._v("^")]),t._v(" 匹配文本开头，而美元符号 "),e("code",[t._v("$")]),t._v(" 则匹配文本末尾")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"it\'s fleece was white as snow"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("snow$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("h4",{attrs:{id:"多行模式-m-与-、"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多行模式-m-与-、"}},[t._v("#")]),t._v(" 多行模式 m 与 ^、$")]),t._v(" "),e("p",[t._v("修饰符 m 开启的多行模式下，^、$ 不仅仅匹配文本的开始与结束，还"),e("strong",[t._v("匹配每一行的开始与结束")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaab\\nccccc'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("b$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaab\\nccccc'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("b$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("mg")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['b']")]),t._v("\n")])])]),e("h4",{attrs:{id:"锚符-对比-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锚符-对比-n"}},[t._v("#")]),t._v(" 锚符 ^$ 对比 \\n")]),t._v(" "),e("p",[t._v("上述列子中如果要进行每一行匹配的话，我们还也可以使用换行符 "),e("code",[t._v("\\n")]),t._v("。\n"),e("code",[t._v("\\n")]),t._v(" 和锚符 "),e("code",[t._v("$")]),t._v(" 的第一个不同点是它不像锚符那样，它会消费 "),e("code",[t._v("\\n")]),t._v(" 即将 "),e("code",[t._v("\\n")]),t._v(" 加入到匹配结果中")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaaab\\nccccc'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("b\\n")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("mg")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["b\\n"]')]),t._v("\n")])])]),e("h3",{attrs:{id:"单词边界-b-和-b"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单词边界-b-和-b"}},[t._v("#")]),t._v(" 单词边界 \\b 和 \\B")]),t._v(" "),e("p",[e("code",[t._v("\\b")]),t._v(" 是单词边界，具体就是 "),e("code",[t._v("\\w")]),t._v(" 与 "),e("code",[t._v("\\W")]),t._v(" 之间的位置，也包括 "),e("code",[t._v("\\w")]),t._v(" 与 "),e("code",[t._v("^")]),t._v(" 之间的位置，和 "),e("code",[t._v("\\w")]),t._v(" 与 "),e("code",[t._v("$")]),t._v(" 之间的位置。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[#JS#] #Lesson_01#.#mp4#"')]),t._v("\n")])])]),e("p",[t._v("\\B 就是 \\b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \\b，剩下的都是 \\B 的。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[JS] Lesson_01.mp4"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"')]),t._v("\n")])])]),e("h3",{attrs:{id:"前瞻断言和后瞻断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前瞻断言和后瞻断言"}},[t._v("#")]),t._v(" 前瞻断言和后瞻断言")]),t._v(" "),e("p",[t._v("前瞻断言\n语法为："),e("code",[t._v("x(?=y)")]),t._v('，它表示 “匹配 x, 仅在后面是 y 的情况"”\n语法为：'),e("code",[t._v("x(?!y)")]),t._v("，意思是 “查找 x, 但是仅在不被 y 跟随的情况下匹配成功”\n后瞻断言\n后瞻肯定断言："),e("code",[t._v("(?<=y)x")]),t._v(", 匹配 x, 仅在前面是 y 的情况。\n后瞻否定断言："),e("code",[t._v("(?<!y)x")]),t._v(", 匹配 x, 仅在前面不是 y 的情况。")]),t._v(" "),e("blockquote",[e("p",[t._v("断言括号不会成为捕获分组，即内容不会再去匹配第一个匹配的结果\n把位置理解空字符，是对位置非常有效的理解方式。")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 比如把 "12345678"，变成 "12,345,678"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\B 是词与词的边界，故相当 1#2#3#4#5#6#7#8，用 # 表示 \\B")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从后开始匹配 \\B，仅其后是三个数字")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345678"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B(?=(\\d{3})$)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "12345,678"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要求 \\B 后面 3 个数字一组，也就是 \\d{3} 至少出现一次")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345678"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\B(?=(\\d{3})+$)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"12,345,678"')]),t._v("\n")])])]),e("h2",{attrs:{id:"分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),e("p",[t._v("括号将正则表达式的一部分组合在一起，因此量词可以整体应用")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不带括号，模式 go+ 表示 g 字符，其后 o 重复一次或多次。例如 goooo 或 gooooooooo。")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 括号将字符组合，所以 (go)+ 匹配 go，gogo，gogogo等")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Gogogo now!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(go)+")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("gi")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Gogogo"')]),t._v("\n")])])]),e("p",[t._v("除了组合功能外，还提供了"),e("strong",[t._v("分组，便于我们引用它。引用某个分组结果")]),t._v("，会有两种情形：在 JavaScript 里引用它，在正则表达式里引用它。")]),t._v(" "),e("h3",{attrs:{id:"分组匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组匹配"}},[t._v("#")]),t._v(" 分组匹配")]),t._v(" "),e("p",[t._v("如果正则"),e("strong",[t._v("不带修饰符 g")]),t._v("，正则引擎将用分组顺序匹配前一个匹配的结果")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I love JavaScript"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("Java(Script)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript（完全匹配）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Script（第一个分组）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),e("p",[t._v("如果 regexp 带有 g 标记，则不包含分组匹配结果")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I love JavaScript"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("Java(Script)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),e("p",[t._v("如果没有匹配项，则无论是否带有标记 g ，都将返回 null")]),t._v(" "),e("p",[t._v("更多 match 用法参考 "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match",target:"_blank",rel:"noopener noreferrer"}},[t._v("String.prototype.match()"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",target:"_blank",rel:"noopener noreferrer"}},[t._v("matchAll"),e("OutboundLink")],1),t._v(" 是 match 的增强版本：match 在修饰符 g 不会包含分组匹配的结果，而 matchAll 则会返回一个包含每个分组匹配的结果数组(格式与不带 g 标记的 str.match 相同)的迭代对象")]),t._v(" "),e("p",[e("img",{attrs:{src:a(439),alt:"matchAll"}})]),t._v(" "),e("h3",{attrs:{id:"嵌套分组匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#嵌套分组匹配"}},[t._v("#")]),t._v(" 嵌套分组匹配")]),t._v(" "),e("p",[t._v("分组里嵌套分组")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcdefg'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(b(cd)e)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["abcde", "bcde", "cd"]')]),t._v("\n")])])]),e("p",[t._v("从上面结果看出，匹配的结果很有顺序，"),e("strong",[t._v("因为正则引擎默认从左到右，以左括号开始为分组编号，并且以分组顺序匹配前一个匹配的结果")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"分组命名及引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组命名及引用"}},[t._v("#")]),t._v(" 分组命名及引用")]),t._v(" "),e("p",[t._v("默认情况下，正则引擎默认从左到右，以左括号开始为分组编号，可以通过在开始括号之后立即放置 "),e("code",[t._v("?<name>")]),t._v(" 来为分组命名")]),t._v(" "),e("p",[t._v("正则引擎在匹配过程中，给每一个分组都开辟一个空间，用来存储每一个分组匹配到的数据")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("$<name>")]),t._v(" 在 JavaScript 中引用分组匹配的结果")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-10-30, 2020-01-01"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$<day>.$<month>.$<year>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30.10.2019, 01.01.2020")]),t._v("\n")])])]),e("p",[t._v("在模式中，使用 "),e("code",[t._v("\\N")]),t._v("、"),e("code",[t._v("\\k<name>")]),t._v(" 引来分组匹配的结果，其中 N 是分组编号")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 引号内的内容")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('He said: "She\'s the one!".')]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("['\"](.*?)['\"]")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不是我们想要的结果")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"She'")]),t._v("\n\nregexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(['\"])(.*?)\\1")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "She\'s the one!"')]),t._v("\n\nregexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<quote>['\"])(.*?)\\k<quote>")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "She\'s the one!"')]),t._v("\n")])])]),e("h3",{attrs:{id:"排除捕获分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排除捕获分组"}},[t._v("#")]),t._v(" 排除捕获分组")]),t._v(" "),e("p",[t._v("有时我们需要括号才能正确应用量词，但不会引用它，即，既不在 JavaScript API 里引用，也不在正则里反向引用可以通过在开头添加 ?: 来排除组。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gogogo John!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?: 从捕获组中排除 'go'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regexp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?:go)+ (\\w+)")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Gogogo John（完全匹配）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// John")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2（数组中没有更多项）")]),t._v("\n")])])]),e("p",[t._v("另外引用编号 "),e("code",[t._v("\\10")]),t._v(" 是表示第 10 个分组，为了区分为 "),e("code",[t._v("\\1")]),t._v(" 和 0 ，可以请使用 "),e("code",[t._v("(?:\\1)0")]),t._v(" 或者 "),e("code",[t._v("\\1(?:0)")])]),t._v(" "),e("h2",{attrs:{id:"正则表达式回溯法原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式回溯法原理"}},[t._v("#")]),t._v(" 正则表达式回溯法原理")]),t._v(" "),e("p",[t._v("正则表达式回溯法，正则表达式匹配字符串的这种方式，有个学名，叫回溯法。回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。")]),t._v(" "),e("p",[t._v("本质上就是深度优先搜索算法。"),e("strong",[t._v("其中退到之前的某一步这一过程")]),t._v("，我们称为“回溯”。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。")]),t._v(" "),e("p",[t._v("正则引擎发生回溯主要在以下三种地方")]),t._v(" "),e("ul",[e("li",[t._v("贪婪量词")]),t._v(" "),e("li",[t._v("惰性量词")]),t._v(" "),e("li",[t._v("选择分支符（|）")])]),t._v(" "),e("p",[e("strong",[t._v("贪婪量词下的回溯")])]),t._v(" "),e("p",[e("code",[t._v("'abbbc'.match(/ab{1,3}bbc/)")]),t._v("，贪婪模式下，量词已经匹配完所有可能的字符，下一部分模式发现没有字符可匹配到，就会向前要字符，即让出一个字符给下一部分模式进行匹配，总之量词后的部分模式中，只要有没匹配到的字符的，正则引擎就会向前回溯，重新匹配")]),t._v(" "),e("p",[e("img",{attrs:{src:a(440),alt:"贪婪回溯1"}})]),t._v(" "),e("p",[e("code",[t._v('\'"abc"de\'.match(/".*"/)')]),t._v("，第 8 步中由于没有字符可以匹配 "),e("code",[t._v('"')]),t._v("，故会不断向前回溯匹配")]),t._v(" "),e("p",[e("img",{attrs:{src:a(441),alt:"贪婪回溯2"}})]),t._v(" "),e("p",[e("strong",[t._v("惰性量词下的回溯")])]),t._v(" "),e("p",[e("code",[t._v('"12345".match(/(\\d{1,3}?)(\\d{1,3})/)')]),t._v("，惰性模式下，量词只会先匹配 1 次，只有在模式的剩余部分无法在给定位置匹配时，正则表达式引擎才会增加重复次数")]),t._v(" "),e("p",[e("img",{attrs:{src:a(442),alt:"惰性回溯"}})]),t._v(" "),e("p",[e("strong",[t._v("分支下的回溯")])]),t._v(" "),e("p",[t._v("分支也是具有惰性的，比如 "),e("code",[t._v("/can|candy/")]),t._v('，去匹配字符串 "candy"，得到的结果是 "can"，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。但如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯，例如')]),t._v(" "),e("p",[e("code",[t._v('/"candy".match(^(?:can|candy)$/)')])]),t._v(" "),e("h2",{attrs:{id:"练习题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[t._v("#")]),t._v(" 练习题")]),t._v(" "),e("h4",{attrs:{id:"将每个单词的首字母转换为大写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将每个单词的首字母转换为大写"}},[t._v("#")]),t._v(" 将每个单词的首字母转换为大写")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=\\b)\\w")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Hello World"')]),t._v("\n")])])]),e("h4",{attrs:{id:"字符串-trim-方法模拟"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串-trim-方法模拟"}},[t._v("#")]),t._v(" 字符串 trim 方法模拟")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" foobar "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s+|\\s+$")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "foobar"')]),t._v("\n")])])]),e("h4",{attrs:{id:"匹配成对标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配成对标签"}},[t._v("#")]),t._v(" 匹配成对标签")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<title>regular expression</title> <title>regular expression</title>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<(.+)>.*?<\\/\\1>")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["<title>regular expression</title>", "<title>regular expression</title>"]')]),t._v("\n")])])]),e("h4",{attrs:{id:"获取-url-pathname"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取-url-pathname"}},[t._v("#")]),t._v(" 获取 URL pathname")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/laoergege/laoergege-blog'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^https?:\\/\\/[^\\/]*")]),e("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "laoergege/laoergege-blog"')]),t._v("\n")])])]),e("hr"),t._v(" "),e("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);s.default=r.exports}}]);