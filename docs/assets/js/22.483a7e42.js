(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{263:function(v,e,l){"use strict";l.r(e);var _=l(28),t=Object(_.a)({},(function(){var v=this,e=v.$createElement,l=v._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h2",{attrs:{id:"知识大纲"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#知识大纲"}},[v._v("#")]),v._v(" 知识大纲")]),v._v(" "),l("ul",[l("li",[v._v("简介：Node 为我们提供了一个无需依赖浏览器、能够直接与操作系统进行交互的 JavaScript 代码运行环境")]),v._v(" "),l("li",[v._v("安装及基本使用")]),v._v(" "),l("li",[v._v("异步编程\n"),l("ul",[l("li",[v._v("Callbacks")]),v._v(" "),l("li",[v._v("Promises")]),v._v(" "),l("li",[v._v("Generator")]),v._v(" "),l("li",[v._v("Async and Await")])])]),v._v(" "),l("li",[v._v("模块机制")]),v._v(" "),l("li",[v._v("npm 包管理")]),v._v(" "),l("li",[v._v("核心知识\n"),l("ul",[l("li",[l("RouterLink",{attrs:{to:"/NodeJS/Node Event Loop.html"}},[v._v("Node Event Loop")]),v._v(" "),l("ul",[l("li",[v._v("timers（setTimeout、setIntervel）")]),v._v(" "),l("li",[v._v("setImmediate")]),v._v(" "),l("li",[v._v("nextTick")])])],1)])]),v._v(" "),l("li",[v._v("Node 全局对象\n"),l("ul",[l("li",[v._v("process")]),v._v(" "),l("li",[v._v("readline")]),v._v(" "),l("li",[v._v("console")]),v._v(" "),l("li",[v._v("worker")]),v._v(" "),l("li",[v._v("events\n"),l("ul",[l("li",[v._v("NodeJS Event Emitter是NodeJS的核心API，它使您可以将侦听器功能附加到特定事件，一旦事件触发，该事件将被调用。此行为看起来像异步的，因为事件处理程序通常在其最初注册为事件处理程序的时间之后才调用。但是 Event Emitter 是 Node 观察者模式的内置实现，Node 不会在事件循环队列中安排任何事件，一旦事件触发，它将在调用栈上同步的执行监听器，观察者模式能够解耦代码，使代码可读性更强")])])])])]),v._v(" "),l("li",[v._v("其他知识点\n"),l("ul",[l("li",[v._v("进程与线程")]),v._v(" "),l("li",[v._v("中断机制")]),v._v(" "),l("li",[v._v("进程通信\n"),l("ul",[l("li",[v._v("信号")])])])])]),v._v(" "),l("li",[v._v("使用场景\n"),l("ul",[l("li",[v._v("Node CLI")]),v._v(" "),l("li",[v._v("Server")])])])])])}),[],!1,null,null,null);e.default=t.exports}}]);