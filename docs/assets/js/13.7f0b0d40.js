(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{210:function(e,t,a){"use strict";a.r(t);var n=a(0),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"table-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-content"}},[e._v("#")]),e._v(" Table Content")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#table-content"}},[e._v("Table Content")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#git-%E7%94%A8%E6%B3%95"}},[e._v("Git 用法")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%BC%80%E5%A7%8B"}},[e._v("开始")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE"}},[e._v("配置设置")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"}},[e._v("基本使用")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8"}},[e._v("进阶使用")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#git-commit"}},[e._v("git commit")])])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#git-%E5%8E%9F%E7%90%86%E6%8E%A2%E7%B4%A2"}},[e._v("Git 原理探索")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%8E%A2%E7%B4%A2-git-%E7%9B%AE%E5%BD%95"}},[e._v("探索 .git 目录")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#committree-%E5%92%8C-blob-%E5%85%B3%E7%B3%BB"}},[e._v("commit、tree 和 blob 关系")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%88%86%E7%A6%BB%E5%A4%B4%E6%8C%87%E9%92%88"}},[e._v("分离头指针")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"}},[e._v("应用场景")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#head-%E5%92%8C-head-%E5%8C%BA%E5%88%AB"}},[e._v("HEAD^ 和 HEAD~ 区别")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#git-%E5%B7%A5%E4%BD%9C%E6%B5%81"}},[e._v("Git 工作流")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#gitlab"}},[e._v("GitLab")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E5%AD%A6%E4%B9%A0"}},[e._v("参考学习")])])]),e._v(" "),a("h2",{attrs:{id:"git-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-用法"}},[e._v("#")]),e._v(" Git 用法")]),e._v(" "),a("h3",{attrs:{id:"开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[e._v("#")]),e._v(" 开始")]),e._v(" "),a("p",[e._v("学习使用命令行时，最好的方式就是多用 help 命令查看其他命令的相关用法。在控制台输入 "),a("code",[e._v("git help")]),e._v(" 可查看 git 不同命令使用场景:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/laoergege/laoergege-blog/master/images/gc.png",alt:"git 命令"}})]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("git help <command>")]),e._v(" 可查看相关命令文档，"),a("code",[e._v("git <command> -h")]),e._v(" 可在控制台直接简洁打印查看用法。")])]),e._v(" "),a("h3",{attrs:{id:"配置设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置设置"}},[e._v("#")]),e._v(" 配置设置")]),e._v(" "),a("p",[e._v("git 使用前必须设置 git 用户信息（邮箱、用户名），主要用于记录提交得用户信息。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('git config --list\n\ngit config --local user.username "xxx"\ngit config --local user.email "xxx"\n')])])]),a("p",[e._v("配置信息有三种不同级别，优先级分别是:"),a("br"),e._v("\nlocal > global > system")]),e._v(" "),a("h3",{attrs:{id:"基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[e._v("#")]),e._v(" 基本使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 初始化\ngit init\n\n// 暂存文件\ngit add . // 暂存所有文件\ngit add <file> // 仅暂存对应文件\n\n// 提交版本\ngit commit -m "xxx"\n')])])]),a("h3",{attrs:{id:"进阶使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶使用"}},[e._v("#")]),e._v(" 进阶使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 面向工作区 \ngit add -u // 只暂存已跟踪文件，避免把工作区没准备好的新文件直接加到暂存区了。\ngit rm <file> // 删除文件\ngit mv <source> <destination>\n\n// 面向暂存区\ngit rm --cached <file> // 取消文件暂存\ngit reset --hard <commit> // 重置工作区和暂存区\n\n// 面向储存版本\n")])])]),a("p",[a("strong",[e._v("Tip")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("多用 "),a("code",[e._v("git status")]),e._v(" 查看文件状态，git 会有接下来相关操作提示。")]),e._v(" "),a("li",[e._v("使用 "),a("code",[e._v("git log")]),e._v(" 和 "),a("code",[e._v("gitk")]),e._v(" 能够查看提交日志，"),a("code",[e._v("gitk")]),e._v(" 会打开图形化界面。(windows 下 gitk 界面乱码，可输入配置命令 "),a("code",[e._v("git config gui.encoding utf-8")]),e._v("，重新打开即可。)")])]),e._v(" "),a("h4",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[e._v("#")]),e._v(" git commit")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("git commit --amend")]),e._v(" 修改最新commit的message。会创建一个将暂存区的内容生成一个commit，再将当前最新的commit替换成新生成的那一个。")])]),e._v(" "),a("h2",{attrs:{id:"git-原理探索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-原理探索"}},[e._v("#")]),e._v(" Git 原理探索")]),e._v(" "),a("h3",{attrs:{id:"探索-git-目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#探索-git-目录"}},[e._v("#")]),e._v(" 探索 .git 目录")]),e._v(" "),a("p",[e._v("一个 "),a("code",[e._v("git init")]),e._v(" 的初始化项目，隐藏的 "),a("code",[e._v(".git")]),e._v(" 会有以下基础的目录结构:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// power shell\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        2019/7/21     23:42                hooks\nd-----        2019/7/21     23:42                info\nd-----        2019/7/21     23:42                objects\nd-----        2019/7/21     23:42                refs\n-a----        2019/7/21     23:42            130 config\n-a----        2019/7/21     23:42             73 description\n-a----        2019/7/21     23:42             23 HEAD\n")])])]),a("p",[e._v("主要核心文件和目录为:")]),e._v(" "),a("ul",[a("li",[e._v("objects: 核心目录，存放 git 核心对象。.git/objects/ 文件夹中的子文件夹都是以哈希值的前两位字符命名 每个object由40位字符组成，前两位字符用来当文件夹，后38位做文件。")]),e._v(" "),a("li",[e._v("refs: 记录各分支和标签引用")]),e._v(" "),a("li",[e._v("config: 项目 git 本地配置文件")]),e._v(" "),a("li",[e._v("HEAD: 当前的分支引用")])]),e._v(" "),a("p",[e._v("在项目根目录下新建 "),a("code",[e._v("readme")]),e._v(" 文件，并首次提交版本，然后进行以下操作步骤:")]),e._v(" "),a("blockquote",[a("p",[e._v("Tip: "),a("code",[e._v("git cat-file -t")]),e._v("  查看 git 对象的类型，"),a("code",[e._v("git cat-file -p")]),e._v("  查看 git 对象的内容")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PS D:\\laoergege-demos\\git-demo-project\\.git> ls                                                    \n\n    目录: D:\\laoergege-demos\\git-demo-project\\.git\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        2019/7/22     23:10                hooks\nd-----        2019/7/22     23:10                info\nd-----        2019/7/22     23:28                logs\nd-----        2019/7/22     23:28                objects\nd-----        2019/7/22     23:10                refs\nd-----        2019/7/22     23:22                test.txt\n-a----        2019/7/22     23:28             14 COMMIT_EDITMSG\n-a----        2019/7/22     23:10            130 config\n-a----        2019/7/22     23:10             73 description\n-a----        2019/7/22     23:10             23 HEAD\n-a----        2019/7/22     23:28            137 index\n\n\n******************************************************************\n* 新生成的 index 文件即为暂存区的记录\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git> cat HEAD                                              \nref: refs/heads/master\n\n******************************************************************\n* HEAD 记录当前引用的分支\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git> cd refs                                               \nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs> ls                                               \n\n    目录: D:\\laoergege-demos\\git-demo-project\\.git\\refs\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        2019/7/22     23:28                heads\nd-----        2019/7/22     23:10                tags\n\n******************************************************************\n* heads 存放文支\n* tags 存放标签\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs> cd heads                                         \nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> ls                                         \n\n    目录: D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        2019/7/22     23:28             41 master\n\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> cat master                                 \n5efd4f420e04e034a3a6335a2b48883a0554da86\n\n******************************************************************\n* 当前仅有 master 一条分支，查看内容是 40位哈希值字符，\n* 为 git object 文件命名(每个object由40位字符组成，前两位字符用来当文件夹，后38位做文件)。\n*\n* Git 核心对象类型分别为\n* - commit\n* - tree\n* - blob\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -t 5efd4f420e04               \ncommit\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -p 5efd4f420e04               \ntree 3712c209d65dc7167d5fdcdd7dec214bc13a953b\nauthor lianyuansheng <lianyuansheng@xiao100.com> 1563809286 +0800\ncommitter lianyuansheng <lianyuansheng@xiao100.com> 1563809286 +0800\n\nadd readme.md\n\n******************************************************************\n* 每条分支实际指向的是一个 commit 对象\n* commit 对象除了记录提交信息外，还包含 tree 对象\n* tree 对象记录每次提交的文件blob及目录tree\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -t 3712c209d65dc716           \ntree\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -p 3712c209d65dc716           \n100644 blob fdc3d3cd37c23aeb665aa995f395d9c6979bd508    readme.md\n\n******************************************************************\n* 该 tree 只包含文件blob 一个子节点\n* PS：本实验内容简单，可自行提交更复杂操作，查看更多内容\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -t fdc3d3cd37c23ae            \nblob\nPS D:\\laoergege-demos\\git-demo-project\\.git\\refs\\heads> git cat-file -p fdc3d3cd37c23ae            \nHello Git!\n\n******************************************************************\n* Object 文件 fdc3d3cd37c23aeb665aa995f395d9c6979bd508 \n* 的内容正是刚刚我们提交的 readme.md 文件内容\n* git 使用内部 hash-object 命令把 readme.md 的当前内容压缩成二进制文件，\n* 存入 Git。压缩后的二进制文件，称为一个 Git 对象，保存\n* 在.git/objects目录。\n******************************************************************\n\n")])])]),a("p",[e._v("我们修改 readme.md 内容，并再次上传。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PS D:\\laoergege-demos\\git-demo-project> git log\ncommit 5ca8479f1afc822216aebc6e9a164d5a93f4b911 (HEAD -> master)Author: lianyuansheng <lianyuansheng@xiao100.com>Date:   Tue Jul 23 11:57:03 2019 +0800\n\n    修改 readme\ncommit 5efd4f420e04e034a3a6335a2b48883a0554da86Author: lianyuansheng <lianyuansheng@xiao100.com>Date:   Mon Jul 22 23:28:06 2019 +0800\n\n    add readme.md\n\n******************************************************************\n* git log 查看到 5ca8479f1afc822216aebc6e9a164d5a93f4b911 即为\n* 最新的一次提交对象\n******************************************************************\n\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p 5ca8479f1afc82221\ntree 6ca17ac94693a5aedc5ca0deead5ffe676e67092parent 5efd4f420e04e034a3a6335a2b48883a0554da86\nauthor lianyuansheng <lianyuansheng@xiao100.com> 1563854223 +0800\ncommitter lianyuansheng <lianyuansheng@xiao100.com> 1563854223 +0800\n修改 readme\n\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p 6ca17ac94693a5aedc\n100644 blob e1bfe2cd62deac1ff0fa1ab584d4354ec30b5144    readme.md\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p e1bfe2cd62deac1ff0\nHello Git!\n123456\n\n******************************************************************\n* 通过层层查看，我们发现hash值为e1bfe2cd62deac1ff0fa1ab584d4354ec30b5144\n* 的 Object 对象文件（不是原来的 fdc3d3cd37c23aeb665aa995f395d9c6979bd508）\n* 内容即为我们刚刚改写的文件内容。git 会在每次 git add \n* 操作时对每次修改的文件（或者新文件），使用 hash-object 命令对这些文件\n* 重新生成新的 Object 文件存储，这就是 git 和其他版本控制系统的主要差别:\n* 即重新生成快照，而非差异比较。\n******************************************************************\n\n")])])]),a("p",[e._v("当我们在使用 "),a("code",[e._v("git add")]),e._v("、"),a("code",[e._v("git commit")]),e._v(" 等高级命令时，git 实际在调用其底层相关命令。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/laoergege/laoergege-blog/master/images/20190723113201.png",alt:"git 命令"}})]),e._v(" "),a("p",[e._v("可参考阮一峰的 "),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/10/git-internals.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git 原理入门"),a("OutboundLink")],1),e._v("，去尝试使用下底层相关命令。")]),e._v(" "),a("h3",{attrs:{id:"commit、tree-和-blob-关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit、tree-和-blob-关系"}},[e._v("#")]),e._v(" commit、tree 和 blob 关系")]),e._v(" "),a("p",[e._v("在上面操作过程中，我们可能发现一种关系：commit 包含 tree，tree 包含 blob。我们再添加新的文件夹src，里面再加入 index.html 文件然后提交。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PS D:\\laoergege-demos\\git-demo-project> git log\ncommit 9eafc20aba47c34295ba9e77984c08b9003a911d (HEAD -> master)\nAuthor: lianyuansheng <lianyuansheng@xiao100.com>\nDate:   Tue Jul 23 23:42:40 2019 +0800\n\n    add src/index.html\n\ncommit 5ca8479f1afc822216aebc6e9a164d5a93f4b911\nAuthor: lianyuansheng <lianyuansheng@xiao100.com>\nDate:   Tue Jul 23 11:57:03 2019 +0800\n\n    修改 readme\n\ncommit 5efd4f420e04e034a3a6335a2b48883a0554da86\nAuthor: lianyuansheng <lianyuansheng@xiao100.com>\nDate:   Mon Jul 22 23:28:06 2019 +0800\n\n    add readme.md\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p 9eafc20aba47c\ntree fb4ffaecbfaddbd6296331a1da949cecec619e69\nparent 5ca8479f1afc822216aebc6e9a164d5a93f4b911\nauthor lianyuansheng <lianyuansheng@xiao100.com> 1563896560 +0800\ncommitter lianyuansheng <lianyuansheng@xiao100.com> 1563896560 +0800\n\nadd src/index.html\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p fb4ffaecbfadd\n100644 blob e1bfe2cd62deac1ff0fa1ab584d4354ec30b5144    readme.md\n040000 tree 8251a50aff5d385ceb293feb338725de7a80a7f4    src\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p 8251a50aff5d3\n100644 blob e4fd797cd4752a6d66a59a7e89ae76798b460d1b    index.html\nPS D:\\laoergege-demos\\git-demo-project> git cat-file -p e1bfe2cd62deac\nHello Git!\n123456              \n")])])]),a("p",[e._v("通过 commit 对象信息，找到 tree，通过查看 tree，发现了新的子 tree 和原来 blob（readme.md）,再通过子 tree 发现了新添加的 index.html 文件转存的 blob，整体关系图如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/laoergege/laoergege-blog/master/images/20190726090455.png",alt:""}})]),e._v(" "),a("p",[e._v("提交时，Git 创建的 Commit 对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，Tree 相当于一次提交的文件目录快照，Blob 叶子节点对应则是文件。")]),e._v(" "),a("p",[e._v("提交时，Git底层的运行流程大概为：当我们添加或者修改了文件并且 add 到 Stage Area 之后，首先会根据文件内容创建不同的blob，当进行提交之后马上创建一个 tree 组件把需要的 blob 组件添加进去，之后再封装到一个 commit 组件中完成本次提交。对于内容相同的文件只会存一个 blob ，不同的 commit 的区别是 commit、tree 和有差异的 blob，多数未变更的文件对应的 blob 都是相同的，这么设计对于版本管理系统来说可以省很多存储空间。其次，随着 blob 文件的增多，git 还会做 pack 整理。使用增量存储的机制，把内容相近的blob做增量存储。")]),e._v(" "),a("h3",{attrs:{id:"分离头指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分离头指针"}},[e._v("#")]),e._v(" 分离头指针")]),e._v(" "),a("p",[e._v("分离头指针，即 HEAD 指针没有跟分支进行挂钩。在此 HEAD 上产生的 commit 由于没有跟 "),a("code",[e._v("branch")]),e._v(" 和 "),a("code",[e._v("tag")]),e._v(" 挂钩，在 git 眼里，这种 commit 日后都是要被清除的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\ngit checkout <commitID> // 切换到指定版本，会产生分离头指针情况\n\n// 正常情况，HEAD -> master 绑定在一起\nPS D:\\laoergege-demos\\git-demo-project> git log\ncommit d2da0155cc7eee411ebece9aa1021c1ce7bc41d4 (HEAD -> master)\nAuthor: lianyuansheng <lianyuansheng@xiao100.com>\nDate:   Mon Aug 12 22:21:45 2019 +0800\n\n    修改 readme\n...\n\n\n// 分离头指针，此时 HEAD 指针与 master 分开\nPS D:\\laoergege-demos\\git-demo-project> git branch -av\n* (HEAD detached at 022a40a) 022a40a 修改 index.html\n  master                     d2da015 修改 readme\n\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PS D:\\laoergege-demos\\git-demo-project> git merge 022a40a850\nMerge made by the 'recursive' strategy.\n src/index.html | 1 +\n 1 file changed, 1 insertion(+)\n")])])]),a("p",[e._v("进一步操作发现，当切换 master 分支并 merge 刚刚分离头指针提交的版本时，"),a("strong",[e._v("我们始终在 git commit 树上工作，无论我们 "),a("code",[e._v("git merge <commitID> | <branch> | <HEAD>")]),e._v("，所有本质都是操作到对应的 commitID 节点")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[e._v("#")]),e._v(" 应用场景")]),e._v(" "),a("p",[e._v("那么 "),a("code",[e._v("git checkout commitId")]),e._v(" 会出现分离头指针的情况，这种情况下比较危险，因为这个时候你提交的代码没有和分支对应起来，当切换到其他分支的时候(比如master分支)，容易丢失代码。")]),e._v(" "),a("p",[e._v("但是分离头指针也有它的应用场景，就是在自己做尝试或者测试的时候可以分离头指针，当尝试完毕没有用的时候可以随时丢弃，但是如果觉得尝试有用，那么可以新建一个分支，使用 "),a("code",[e._v("git branch <新分支的名称> commitId")])]),e._v(" "),a("h3",{attrs:{id:"head-和-head-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head-和-head-区别"}},[e._v("#")]),e._v(" HEAD^ 和 HEAD~ 区别")]),e._v(" "),a("p",[e._v("一个节点可由多个父节点 merge 而来。")]),e._v(" "),a("ul",[a("li",[e._v("HEAD^n 第几个父节点")]),e._v(" "),a("li",[e._v("HEAD~n 第前几代父节点（类似树的层级关系）")])]),e._v(" "),a("p",[e._v("可组合使用，比如 "),a("code",[e._v("HEAD^2~2")]),e._v("：第前二代第2个父节点。")]),e._v(" "),a("h3",{attrs:{id:"git-工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流"}},[e._v("#")]),e._v(" Git 工作流")]),e._v(" "),a("h2",{attrs:{id:"gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab"}},[e._v("#")]),e._v(" GitLab")]),e._v(" "),a("h2",{attrs:{id:"参考学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考学习"}},[e._v("#")]),e._v(" 参考学习")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("git book 中文版"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://backlog.com/git-tutorial/cn/reference/",target:"_blank",rel:"noopener noreferrer"}},[e._v("猴子都能懂的GIT入门"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=i.exports}}]);