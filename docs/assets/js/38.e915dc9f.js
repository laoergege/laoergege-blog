(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{383:function(e,t,a){"use strict";a.r(t);var r=a(33),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"文件删除（git-rm）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件删除（git-rm）"}},[e._v("#")]),e._v(" 文件删除（git rm）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('PS D:\\laoergege-demos\\git_learning> ls                                                             \n\n    目录: D:\\laoergege-demos\\git_learning\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         2019/7/14     22:52                images\nd-----         2019/7/14     22:52                js\nd-----        2019/10/16     20:00                styles\n-a----        2019/10/16     20:00           1422 index.html\n-a----        2019/10/20     13:57             53 readme.md\n\n\nPS D:\\laoergege-demos\\git_learning> rm readme.md                                                   PS D:\\laoergege-demos\\git_learning> ls                                                             \n\n    目录: D:\\laoergege-demos\\git_learning\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         2019/7/14     22:52                images\nd-----         2019/7/14     22:52                js\nd-----        2019/10/16     20:00                styles\n-a----        2019/10/16     20:00           1422 index.html\n\n\nPS D:\\laoergege-demos\\git_learning> git status                                                     On branch master\nChanges not staged for commit:\n  (use "git add/rm <file>..." to update what will be committed)\n  (use "git checkout -- <file>..." to discard changes in working directory)\n\n        deleted:    readme.md\n\nno changes added to commit (use "git add" and/or "git commit -a")\nPS D:\\laoergege-demos\\git_learning> git rm readme.md                                               rm \'readme.md\'\nPS D:\\laoergege-demos\\git_learning> git status                                                     On branch master\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n        deleted:    readme.md\n')])])]),a("p",[e._v("在上面我们通过 "),a("code",[e._v("rm")]),e._v(" 删除文件，再将删除操作暂存。"),a("code",[e._v("git rm")]),e._v(" 可达到上面两步操作效果。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("PS D:\\laoergege-demos\\git_learning> ls                                                             \n\n    目录: D:\\laoergege-demos\\git_learning\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         2019/7/14     22:52                images\nd-----         2019/7/14     22:52                js\nd-----        2019/10/16     20:00                styles\n-a----        2019/10/16     20:00           1422 index.html\n-a----        2019/10/20     14:09             53 readme.md\n\n\nPS D:\\laoergege-demos\\git_learning> git rm readme.md                                               rm 'readme.md'\nPS D:\\laoergege-demos\\git_learning> git status                                                     On branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    readme.md\n")])])]),a("h2",{attrs:{id:"撤销及重置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销及重置"}},[e._v("#")]),e._v(" 撤销及重置")]),e._v(" "),a("p",[e._v("资料阅读 "),a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git-工具-重置揭密"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("在工作过程，我们肯定会有错误的操作，当发生错误时，我们希望撤销操作或者重置，恢复回原来我们想要的样子。")]),e._v(" "),a("h3",{attrs:{id:"恢复工作区、暂存区、版本区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复工作区、暂存区、版本区"}},[e._v("#")]),e._v(" 恢复工作区、暂存区、版本区")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/reset-workflow.png",alt:""}})]),e._v(" "),a("p",[e._v("git 的基本工作流如上图，其中：")]),e._v(" "),a("ul",[a("li",[e._v("版本区，一般 git 仓库中有多条分支，HEAD 指向当前分支及其最后提交版本")]),e._v(" "),a("li",[e._v("暂存区，预期的下一次提交的快照")]),e._v(" "),a("li",[e._v("工作区，工作目录")])]),e._v(" "),a("p",[e._v("当发生某些情况时想要恢复时，一般情况：")]),e._v(" "),a("ol",[a("li",[e._v("暂存区恢复成HEAD："),a("code",[e._v("git reset")])]),e._v(" "),a("li",[e._v("工作区恢复成暂存区："),a("code",[e._v("git checkout -- <file>")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/laoergege/laoergege-blog/master/images/微信截图_20191020124515.png",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[e._v("#")]),e._v(" git reset")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset [--soft | --mixed | --hard ] [-q] [<commit>]\n")])])]),a("p",[a("code",[e._v("git reset")]),e._v(" 可用来重置 "),a("code",[e._v("HEAD")]),e._v(" 版本区、"),a("code",[e._v("Index")]),e._v(" 暂存区、"),a("code",[e._v("Working")]),e._v(" 工作区内容，reset，若如其名，重置，具有一定毁灭，强制的操作性，会完全覆盖指定区域的内容，checkout 则会相对智能些（下述）。")]),e._v(" "),a("p",[a("code",[e._v("git reset")]),e._v(" 执行时有三个参数可用于指定执行步骤时，一般情况下，git 会顺序执行以下过程：")]),e._v(" "),a("ol",[a("li",[e._v("更新 HEAD：移动 "),a("code",[e._v("HEAD")]),e._v(" 及 "),a("strong",[e._v("HEAD 所在的 branch")]),e._v(" 指针（若只指定了 --soft，执行到此步骤为止）")]),e._v(" "),a("li",[e._v("更新 Index：同步 "),a("code",[e._v("Index")]),e._v(" 暂存区的版本内容同 "),a("code",[e._v("HEAD")]),e._v(" 一致（若只指定了 --mixed，执行到此步骤为止，默认执行到 mixed 步骤）")]),e._v(" "),a("li",[e._v("更新 Work：同步 "),a("code",[e._v("Working")]),e._v(" 工作区的版本内容同 "),a("code",[e._v("Index")]),e._v(" 一致（若指定了 --hard，执行到此步骤）")])]),e._v(" "),a("blockquote",[a("p",[a("em",[e._v("--hard")]),e._v(" 是一种危险的行为，它会强制覆盖工作目录中的文件，以致跟 Index 保持同步")])]),e._v(" "),a("h4",{attrs:{id:"git-reset-单个文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-单个文件"}},[e._v("#")]),e._v(" git reset 单个文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git reset [commit] <file>\n")])])]),a("p",[e._v("若指定了一个文件路径，reset 将会跳过上述第 1 步，因为其作用范围限定为指定的文件或文件集合，而 HEAD 指向的是一个 commit 对象，故跳过更新 HEAD 的步骤。但第三步不会执行，因为 "),a("code",[e._v("git reset")]),e._v(" 默认行为只执行到第二步，添加指定参数命令 "),a("code",[e._v("git reset --hard <file>")]),e._v(" 即可。")]),e._v(" "),a("blockquote",[a("p",[a("em",[e._v("--patch")]),e._v(" 可批量重置多文件")])]),e._v(" "),a("h4",{attrs:{id:"git-reset-和-git-checkout-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-和-git-checkout-区别"}},[e._v("#")]),e._v(" git reset 和 git checkout 区别")]),e._v(" "),a("p",[a("code",[e._v("git reset")]),e._v(" 和 "),a("code",[e._v("git checkout")]),e._v(" 都能更新 HEAD、Index、Work 三个区域内容，但主要区别：")]),e._v(" "),a("p",[e._v("当作为操作 commitID 指向时，"),a("code",[e._v("git reset")]),e._v(" 和 "),a("code",[e._v("git checkout")]),e._v(" 的行为区别是：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("git reset")]),e._v(" 会移动 HEAD 所在分支指针，"),a("code",[e._v("git checkout")]),e._v(" 则不会。"),a("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/reset-checkout.png",alt:""}})]),e._v(" "),a("li",[e._v("不同于 "),a("code",[e._v("reset --hard")]),e._v("，"),a("code",[e._v("checkout")]),e._v(" 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢，其实它还更聪明一些。它会在工作目录中先试着简单合并一下,而 "),a("code",[e._v("reset --hard")]),e._v(" 则会不做检查就全面地替换所有东西。")])]),e._v(" "),a("p",[e._v("当作为操作对象为 file 时，"),a("code",[e._v("git checkout")]),e._v(" 和 "),a("code",[e._v("git reset --hard [branch] file")]),e._v(" 的行为一样。")]),e._v(" "),a("p",[e._v("总结："),a("code",[e._v("git reset")]),e._v(" 和 "),a("code",[e._v("git checkout")]),e._v(" 两者在使用上总有些相似，那么如何区分使用场景，我觉得应该注意两点：")]),e._v(" "),a("ul",[a("li",[e._v("是否会移动 HEAD 所在的分支")]),e._v(" "),a("li",[e._v("是否对文件强覆盖")])]),e._v(" "),a("h2",{attrs:{id:"gitignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[e._v("#")]),e._v(" .gitignore")]),e._v(" "),a("p",[e._v("以下规则会了，也基本熟悉写 .gitignore 文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 注释\n! 相反\n\\ 转义字符\n? 正则，单一字符，除 /\n[a-zA-Z]，正则，可选字符范围，除 /\n* 匹配所有文件或者目录\na 匹配任意字符，除 /\n*.js 匹配js结尾的文件\n/a 匹配根目录下的a文件或者目录\n/a/b a/b 匹配根目录下的a目录的b文件或者目录\na/ 匹配任何a目录\na/* 匹配任何a目录下的文件和目录，相比 a/ 可防止git继续在a目录匹配a目录\n**/a/b 任何路径下a目录里的b文件或者目录\na/** 深度匹配root下a目录的文件或者目录\na/**/b  matches "a/b", "a/x/b", "a/x/y/b" and so on\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);