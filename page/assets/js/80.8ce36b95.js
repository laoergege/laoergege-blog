(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{556:function(t,a,s){"use strict";s.r(a);var v=s(47),n=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"javascript-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-对象"}},[t._v("#")]),t._v(" JavaScript 对象")]),t._v(" "),s("h2",{attrs:{id:"什么是面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象"}},[t._v("#")]),t._v(" 什么是面向对象")]),t._v(" "),s("p",[t._v("从人类成长过程中，我们总是先意识到一个对象，比如先认识到某一个苹果能吃（这里的某一个苹果就是一个对象），继而认识到所有的苹果都可以吃（这里的所有苹果，就是一个类）。")]),t._v(" "),s("p",[t._v("从人类的认知角度来说，对象应该是下列事物之一：")]),t._v(" "),s("ul",[s("li",[t._v("一个可以触摸或者可以看见的东西；")]),t._v(" "),s("li",[t._v("人的智力可以理解的东西；")]),t._v(" "),s("li",[t._v("可以指导思考或行动（进行想象或施加动作）的东西。")])]),t._v(" "),s("p",[t._v("我们在程序系统设计中，把相应的数据和方法封装成一个整体，面向对象编程就是整个程序系统看作一种包含各种独立而又互相通信的对象的思想，也就是将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。是更接近人类思维模式的一种编程范式。")]),t._v(" "),s("p",[t._v("在不同的编程语言中，设计者也利用各种不同的语言特性来抽象"),s("strong",[t._v("模拟描述")]),t._v("对象，最为成功的流派是使用“类”的方式来。比如 C++、Java 等流行的编程语言，而 JavaScript 则是使用 “原型”，这也正是 JavaScript 面向对象写法与其他主流语言显得格格不如的原因。"),s("strong",[t._v("但是无论是基于类还是基于原型，都是不同面向对象设计的思路")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("基于类")]),t._v("的编程提倡使用一个关注分类和类之间关系开发模型。在这类语言中，总是先有类，再从类去实例化一个对象。类与类之间又可能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。")]),t._v(" "),s("p",[t._v("与此相对，"),s("strong",[t._v("基于原型")]),t._v("的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。")]),t._v(" "),s("h2",{attrs:{id:"javascript-对象模型设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-对象模型设计"}},[t._v("#")]),t._v(" JavaScript 对象模型设计")]),t._v(" "),s("p",[t._v("一个对象有如下几个特点：")]),t._v(" "),s("ol",[s("li",[t._v("对象具有唯一标识性：即使完全相同的两个对象，也并非同一个对象。")]),t._v(" "),s("li",[t._v("对象有状态：对象具有状态，同一对象可能处于不同状态之下。")]),t._v(" "),s("li",[t._v("对象具有行为：即对象的状态，可能因为它的行为产生变迁。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象具有唯一标识性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象的状态和行为")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对象的状态、行为在 C++ 中称它们为“成员变量”和“成员函数”，在 Java 中则称它们为“属性”和“方法”，而在 JavaScript 中，将状态和行为统一抽象为“属性”。总的来说，"),s("strong",[t._v("JavaScript 对象实质是一个无序属性集合、键值对的索引结构")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("在实现了对象基本特征的基础上，JavaScript 中对象独有的特色是：对象具有高度的动态性，这是因为 JavaScript 赋予了使用者在运行时为对象添改状态和行为的能力")]),t._v("。")]),t._v(" "),s("p",[t._v("JavaScript 用一组特征（attribute）来描述属性（property），把属性分为两类：数据属性和访问器属性。")]),t._v(" "),s("p",[s("strong",[t._v("数据属性")])]),t._v(" "),s("ul",[s("li",[t._v("value：就是属性的值。")]),t._v(" "),s("li",[t._v("writable：决定属性能否被赋值。")]),t._v(" "),s("li",[t._v("enumerable：决定 for in 能否枚举该属性。")]),t._v(" "),s("li",[t._v("configurable：决定该属性能否被删除或者改变特征值。")])]),t._v(" "),s("p",[s("strong",[t._v("访问器（getter/setter）属性")])]),t._v(" "),s("ul",[s("li",[t._v("getter：函数或 undefined，在取属性值时被调用。")]),t._v(" "),s("li",[t._v("setter：函数或 undefined，在设置属性值时被调用。")]),t._v(" "),s("li",[t._v("enumerable：决定 for in 能否枚举该属性。")]),t._v(" "),s("li",[t._v("configurable：决定该属性能否被删除或者改变特征值。")])]),t._v(" "),s("p",[t._v("一个对象的属性其中的 writable、enumerable、configurable 都默认为 true")]),t._v(" "),s("p",[t._v("读取属性特征")]),t._v(" "),s("p",[t._v("的对象系统设计虽然特别，但是 JavaScript 提供了完全运行时的对象系统，这使得它可以模仿多数面向对象编程范式（下一节课我们会给你介绍 JavaScript 中两种面向对象编程的范式：基于类和基于原型），所以它也是正统的面向对象语言。")]),t._v(" "),s("p",[t._v("JavaScript 对象的具体设计：具有高度动态性的属性集合。")]),t._v(" "),s("p",[t._v("创建对象")]),t._v(" "),s("ul",[s("li",[t._v("工厂模式")]),t._v(" "),s("li",[t._v("构造器模式")]),t._v(" "),s("li",[t._v("原型模式")])]),t._v(" "),s("p",[t._v("new 操作法")]),t._v(" "),s("ol",[s("li",[t._v("创建一个新的对象")]),t._v(" "),s("li",[t._v("将 this 指向该新对象")]),t._v(" "),s("li",[t._v("执行构造函数")]),t._v(" "),s("li",[t._v("返回该新对象")])]),t._v(" "),s("p",[t._v("原型")]),t._v(" "),s("p",[t._v("你甚至可以理解为什么会有“JavaScript 不是面向对象”这样的说法了。这是由于 JavaScript 的对象设计跟目前主流基于类的面向对象差异非常大。")]),t._v(" "),s("p",[t._v("这样的对象系统设计虽然特别，但是 JavaScript 提供了完全运行时的对象系统，这使得它可以模仿多数面向对象编程范式（下一节课我们会给你介绍 JavaScript 中两种面向对象编程的范式：基于类和基于原型）")]),t._v(" "),s("p",[t._v("JavaScript 是一门面向对象的语言，我想标准中能这样说，正是因为 JavaScript 的高度动态性的对象系统")]),t._v(" "),s("p",[t._v("要想理解 JavaScript 对象，必须清空我们脑子里“基于类的面向对象”相关的知识，回到人类对对象的朴素认知和面向对象的语言无关基础理论，我们就能够理解 JavaScript 面向对象设计的思路。在这篇文章中，我从对象的基本理论出发，和你理清了关于对象的一些基本概念，分析了 JavaScript 对象的设计思路。接下来又从运行时的角度，介绍了 JavaScript 对象的具体设计：具有高度动态性的属性集合。")]),t._v(" "),s("hr"),t._v(" "),s("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);a.default=n.exports}}]);